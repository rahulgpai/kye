{"version":3,"sources":["components/Card.js","components/SearchList.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Card","users","console","log","map","user","imageUrl","id","className","key","src","alt","name","email","phone","website","SearchList","handleChange","type","placeholder","onChange","CardList","state","searchText","e","setState","target","value","fetch","then","res","json","data","catch","err","this","filteredUsers","filter","toLowerCase","includes","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAwBeA,EAtBF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEd,OADAC,QAAQC,IAAIF,GAEV,kBAAC,WAAD,KACGA,EACGA,EAAMG,KAAI,SAAAC,GACR,IAAMC,EAAW,iCAAmCD,EAAKE,GACzD,OACE,wBAAIC,UAAU,YAAYC,IAAKJ,EAAKE,IAClC,yBAAKG,IAAKJ,EAAUK,IAAKN,EAAKO,OAC9B,6BAAMP,EAAKO,MACX,6BAAMP,EAAKQ,OACX,6BAAMR,EAAKS,OACX,6BAAMT,EAAKU,aAIjB,OCLKC,EAZI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACE,kBAAC,WAAD,KACE,2BACEC,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCoCHI,E,2MAvCbC,MAAQ,CACNrB,MAAO,GACPsB,WAAY,I,EAcdN,aAAe,SAAAO,GACb,EAAKC,SAAS,CACZF,WAAYC,EAAEE,OAAOC,S,mFAbJ,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKP,SAAS,CACZxB,MAAO+B,OAGVC,OAAM,SAAAC,S,+BASD,IAAD,EACuBC,KAAKb,MAA3BrB,EADD,EACCA,MAAOsB,EADR,EACQA,WACTa,EAAgBnC,EAAMoC,QAAO,SAAAhC,GAAI,OACrCA,EAAKO,KAAK0B,cAAcC,SAAShB,EAAWe,kBAG9C,OACE,yBAAK9B,UAAU,uBACb,kBAAC,EAAD,CAAYS,aAAckB,KAAKlB,eAC/B,4BACE,kBAAC,EAAD,CAAMhB,MAAOmC,U,GAjCAI,aCSRC,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,wBAAIA,UAAU,QAAd,6BACA,kBAAC,EAAD,QCIckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.aa6625fb.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n\nconst Card = ({ users }) => {\n  console.log(users);\n  return (\n    <Fragment>\n      {users\n        ? users.map(user => {\n            const imageUrl = \"https://i.pravatar.cc/150?img=\" + user.id;\n            return (\n              <li className=\"solo-card\" key={user.id}>\n                <img src={imageUrl} alt={user.name} />\n                <div>{user.name}</div>\n                <div>{user.email}</div>\n                <div>{user.phone}</div>\n                <div>{user.website}</div>\n              </li>\n            );\n          })\n        : null}\n    </Fragment>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\n\nconst SearchList = ({ handleChange }) => {\n  return (\n    <Fragment>\n      <input\n        type=\"search\"\n        placeholder=\"Search Users...\"\n        onChange={handleChange}\n      ></input>\n    </Fragment>\n  );\n};\n\nexport default SearchList;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport SearchList from \"./SearchList\";\n\nclass CardList extends Component {\n  state = {\n    users: [],\n    searchText: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          users: data\n        });\n      })\n      .catch(err => {});\n  }\n\n  handleChange = e => {\n    this.setState({\n      searchText: e.target.value\n    });\n  };\n\n  render() {\n    const { users, searchText } = this.state;\n    const filteredUsers = users.filter(user =>\n      user.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n\n    return (\n      <div className=\"card-list container\">\n        <SearchList handleChange={this.handleChange}></SearchList>\n        <ul>\n          <Card users={filteredUsers}></Card>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CardList;\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"acme\">KYE - Know Your Employees</h1>\n      <CardList></CardList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}